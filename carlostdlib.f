HEX
FE000000 CONSTANT RPI4 
RPI4 200000 + CONSTANT GPIO_ADDR
: '(' [ CHAR ( ] LITERAL ;
: ')' [ CHAR ) ] LITERAL ;
: '"' [ CHAR " ] LITERAL ;
: ( IMMEDIATE 1 BEGIN KEY DUP '(' = IF DROP 1+ ELSE ')' = IF 1- THEN THEN DUP 0= UNTIL DROP ;
: WITHIN -ROT OVER <= IF > IF TRUE ELSE FALSE THEN ELSE 2DROP FALSE THEN ;
( utility.f - per inserire i commenti - jonesforth.f )

: C, HERE @ C! 1 HERE +! ;
: ALIGN HERE @ 3 + 3 INVERT AND HERE ! ;
: S" IMMEDIATE STATE @ IF ' LITS , HERE @ 0 ,
	BEGIN KEY DUP '"' <> WHILE C, REPEAT DROP DUP HERE @ SWAP - 4- SWAP ! ALIGN
	ELSE HERE @
	BEGIN KEY DUP '"' <> WHILE OVER C! 1+ REPEAT DROP HERE @ - HERE @ SWAP THEN ;
: ." IMMEDIATE STATE @ 
	IF [COMPILE] S" ' TELL ,
	ELSE BEGIN KEY DUP '"' = IF DROP EXIT THEN EMIT AGAIN THEN ;

: GET @ U. ;
: STACK_CLEAR BEGIN DEPTH 0> WHILE DROP REPEAT ;

( gpio.f )
GPIO_ADDR      CONSTANT GPFSEL0
GPIO_ADDR  4 + CONSTANT GPFSEL1
GPIO_ADDR  8 + CONSTANT GPFSEL2
GPIO_ADDR 10 + CONSTANT GPFSEL4

: 1BIT_SET 1 SWAP LSHIFT ;
: GPIO 1BIT_SET ;
: 2_LSHIFT A MOD 2 * ;
: 3_LSHIFT A MOD 3 * ;
: N_GPIO 0 SWAP BEGIN DUP 2 MOD 0 = IF 1 RSHIFT SWAP 1+ SWAP ELSE THEN DUP 2 = UNTIL DROP 1+ ;
: MASK2 2_LSHIFT 3 SWAP LSHIFT INVERT ;
: MASK3 3_LSHIFT 7 SWAP LSHIFT INVERT ;
: OUT 3_LSHIFT 1BIT_SET ;
: ALT0_FUN 3_LSHIFT 2+ 1BIT_SET ;
: ALT5_FUN 3_LSHIFT 1+ 1BIT_SET ;
: FSEL DUP A / 4 * GPFSEL0 + ;
: FUNCTION FSEL 2DUP SWAP MASK3 SWAP @ AND ROT ;
: INPUT N_GPIO FUNCTION DROP SWAP ! ;
: OUTPUT N_GPIO FUNCTION OUT OR SWAP ! ;
: ALT0 N_GPIO FUNCTION ALT0_FUN OR SWAP ! ;
: ALT5 N_GPIO FUNCTION ALT5_FUN OR SWAP ! ;

DECIMAL
0 GPIO CONSTANT GPIO0 1 GPIO CONSTANT GPIO1 2 GPIO CONSTANT GPIO2 3 GPIO CONSTANT GPIO3
4 GPIO CONSTANT GPIO4 5 GPIO CONSTANT GPIO5 6 GPIO CONSTANT GPIO6 7 GPIO CONSTANT GPIO7
8 GPIO CONSTANT GPIO8 9 GPIO CONSTANT GPIO9 10 GPIO CONSTANT GPIO10 11 GPIO CONSTANT GPIO11
12 GPIO CONSTANT GPIO12 13 GPIO CONSTANT GPIO13 14 GPIO CONSTANT GPIO14 15 GPIO CONSTANT GPIO15
16 GPIO CONSTANT GPIO16 17 GPIO CONSTANT GPIO17 18 GPIO CONSTANT GPIO18 19 GPIO CONSTANT GPIO19
20 GPIO CONSTANT GPIO20 21 GPIO CONSTANT GPIO21 22 GPIO CONSTANT GPIO22 23 GPIO CONSTANT GPIO23
24 GPIO CONSTANT GPIO24 25 GPIO CONSTANT GPIO25 26 GPIO CONSTANT GPIO26 27 GPIO CONSTANT GPIO27
10 GPIO CONSTANT GPIO42
HEX

( timer.f )
RPI4 3000 + CONSTANT TIMER 
TIMER       CONSTANT TIMER_CONTROL_STATUS
TIMER  04 + CONSTANT TIMER_COUNTER_LOW

: NOW TIMER_COUNTER_LOW @ ;
: DELAY NOW + BEGIN DUP NOW - 0 <= UNTIL DROP ;
: MSEC 3E8 * ;
: 0.5SEC 1F4 MSEC ;
: SEC 3E8 MSEC * ;

( led.f )
GPIO_ADDR 1C + CONSTANT GPSET0
GPIO_ADDR 20 + CONSTANT GPSET1
GPIO_ADDR 28 + CONSTANT GPCLR0
GPIO_ADDR 2C + CONSTANT GPCLR1
GPIO_ADDR 34 + CONSTANT GPLEV0

: INIT_LED 
    GPIO13 OUTPUT GPIO16 OUTPUT GPIO26 OUTPUT ;
GPIO13 CONSTANT RED
GPIO16 CONSTANT YELLOW
GPIO26 CONSTANT GREEN

: LED GPSET0 GPCLR0 ;
: LED42 GPIO42 GPSET1 GPCLR1 ;
: ON DROP ! ;
: OFF NIP ! ;
: HIGH LED ON ;
: LOW LED OFF ;
: IS_ON GPLEV0 @ AND 0 = IF 0 ELSE 1 THEN ;
: BLINK 2DUP LED ON DELAY LED OFF DELAY ;

( event.f )
GPIO_ADDR 40 + CONSTANT GPEDS0
GPIO_ADDR 4C + CONSTANT GPREN0
GPIO_ADDR 58 + CONSTANT GPFEN0
GPIO_ADDR 7C + CONSTANT GPAREN0
GPIO_ADDR 88 + CONSTANT GPAFEN0

: ENABLE TUCK @ OR SWAP ! ;
: DISABLE SWAP INVERT OVER @ AND SWAP ! ;
: CLEAR_EVENT GPEDS0 ENABLE ;

( button.f )
GPIO_ADDR E4 + CONSTANT GPIO_PUP_PDN_0
: PULL_UP N_GPIO GPIO_PUP_PDN_0 2DUP SWAP MASK2 SWAP @ AND ROT 2_LSHIFT 1BIT_SET OR SWAP ! ;
: PULL_DOWN N_GPIO GPIO_PUP_PDN_0 2DUP SWAP MASK2 SWAP @ AND ROT 2_LSHIFT 1+ 1BIT_SET OR SWAP ! ;
: INIT_BUTTON
    GPIO9 INPUT GPIO10 INPUT
    GPIO9 PULL_UP GPIO10 PULL_UP
    GPIO9 GPREN0 ENABLE GPIO10 GPREN0 ENABLE
    GPIO9 GPIO10 OR CLEAR_EVENT ;
GPIO9 CONSTANT BREAK_BUTTON
GPIO10 CONSTANT EXIT_BUTTON
: IS_PRESSED GPLEV0 @ AND 0 = IF 1 ELSE 0 THEN ;
: IS_CLICKED GPEDS0 @ AND 0 = IF 0 ELSE 1 THEN ;

( i2c.f )
RPI4 804000 + CONSTANT BSC1 
BSC1 00 + CONSTANT I2C_CONTROL
BSC1 04 + CONSTANT I2C_STATUS
BSC1 08 + CONSTANT I2C_DATA_LENGTH
BSC1 0C + CONSTANT I2C_SLAVE_ADDRESS
BSC1 10 + CONSTANT I2C_DATA_FIFO

: SET TUCK @ OR SWAP ! ;
: CLEAR SWAP INVERT OVER @ AND SWAP ! ;
: INIT_I2C GPIO2 ALT0 GPIO3 ALT0 ;

( I2C_CONTROL )
0 1BIT_SET CONSTANT WRITE
4 1BIT_SET CONSTANT FIFO_CLEAR
7 1BIT_SET CONSTANT START
F 1BIT_SET CONSTANT I2CEN
1 1BIT_SET CONSTANT TRANSFER_DONE
8 1BIT_SET CONSTANT ACK_ERR
9 1BIT_SET CONSTANT CLKT

: RESET_FIFO FIFO_CLEAR I2C_CONTROL SET ;
: RESET_STATUS 
	TRANSFER_DONE   I2C_STATUS SET
	ACK_ERR         I2C_STATUS SET
	CLKT            I2C_STATUS SET ;
: SET_SLAVE 27 I2C_SLAVE_ADDRESS ! ;
: I2C_SETUP
	RESET_STATUS
	RESET_FIFO
	1 I2C_DATA_LENGTH !
	SET_SLAVE ;
: I2C_STORE I2C_DATA_FIFO ! ;
: I2C_SEND
	WRITE I2C_CONTROL CLEAR
	START I2C_CONTROL SET
	I2CEN I2C_CONTROL SET ;
: I2C_DELAY 10 MSEC DELAY ;
: >I2C
	I2C_SETUP
	I2C_STORE
	I2C_SEND
	I2C_DELAY ;
: SEND SWAP >I2C >I2C ;
