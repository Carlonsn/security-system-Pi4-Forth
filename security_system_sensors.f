( sicurezza.f )
GPIO5 CONSTANT BUTTON5
GPIO6 CONSTANT BUTTON6
GPIO7 CONSTANT BUTTON7
GPIO8 CONSTANT BUTTON8

BUTTON5 GPREN0 ENABLE
BUTTON6 GPREN0 ENABLE
BUTTON7 GPREN0 ENABLE
BUTTON8 GPREN0 ENABLE

: BUTTONS_RESET BUTTON5 BUTTON6 OR BUTTON7 OR BUTTON8 OR CLEAR_EVENT ;

: SEQUENZA 8 = -ROT 6 = -ROT 5 = -ROT 2SWAP SWAP 7 = ; ( ordine 7 5 6 8 )
: RESET STACK_CLEAR
        GPEDS0 @ 0<> IF
        BUTTONS_RESET THEN
        LCD CLEAR CURSOR !BLINKS ;

: PIN_MSG LCD CLEAR 'P 'I 'N ': CURSOR BLINKS ;
: PIN_ERR DOWN CURSOR 'W 'R 'O 'N 'G 'SPACE 'P 'I 'N  ;
: PIN_OK DOWN CURSOR 'C 'O 'R 'R 'E 'C 'T 'SPACE 'P 'I 'N ;
: PIN_CHECK
    BEGIN
        RESET  
        ." DIGITA IL PIN E PREMI INVIO "
        PIN_MSG
        BEGIN
            BUTTON7 IS_CLICKED IF
            ." 7 " '7 BUTTON7 N_GPIO BUTTON7 CLEAR_EVENT THEN

            BUTTON5 IS_CLICKED IF
            ." 5 " '5 BUTTON5 N_GPIO BUTTON5 CLEAR_EVENT THEN 

            BUTTON6 IS_CLICKED IF
            ." 6 " '6 BUTTON6 N_GPIO BUTTON6 CLEAR_EVENT THEN

            BUTTON8 IS_CLICKED IF
            ." 8 " '8 BUTTON8 N_GPIO BUTTON8 CLEAR_EVENT THEN

        BREAK_BUTTON IS_CLICKED
        UNTIL
        BREAK_BUTTON CLEAR_EVENT

        0.5SEC YELLOW BLINK

        DEPTH 4 <> IF
            STACK_CLEAR
            FALSE
            ." ERRATA " CR PIN_ERR 
            0.5SEC RED BLINK 
        ELSE
            SEQUENZA
            AND AND AND
            DUP FALSE = IF
                ." ERRATA " CR PIN_ERR
                0.5SEC RED BLINK
            THEN 
        THEN 
    TRUE = BREAK_BUTTON IS_CLICKED OR
    UNTIL
    BREAK_BUTTON IS_CLICKED IF
        BREAK_BUTTON CLEAR_EVENT
        FALSE
    ELSE
        ." CORRETTA " CR PIN_OK 
        1 SEC GREEN BLINK
        RESET
        TRUE
    THEN
;

( pir.f )
GPIO12 OUTPUT
GPIO12 CONSTANT BUZZER
GPIO27 CONSTANT PIR
PIR GPREN0 ENABLE
PIR CLEAR_EVENT

: IS_HIGH IS_ON ;
: BLINK_BUZ 2DUP LED ON BUZZER HIGH DELAY LED OFF BUZZER LOW DELAY ;
: MOTION_DETECTED IS_CLICKED ;
: DELAY_COUNTER 0 ;

: PIR_CALIBRATION
	BEGIN 
		PIR IS_HIGH 0 = IF 1 SEC DELAY YELLOW LED OFF ." Nessun movimento" CR
		ELSE YELLOW LED ON ." Pir High" CR DELAY_COUNTER
			BEGIN PIR IS_HIGH WHILE 1 SEC DELAY 1+ DUP . ." sec " REPEAT CR
		THEN 1 SEC DELAY YELLOW LED OFF ." Pir Low" CR
        DEPTH 0> IF ." Durata totale: " . ." secondi" CR 1 SEC DELAY THEN
	BREAK_BUTTON IS_CLICKED UNTIL 
	BREAK_BUTTON CLEAR_EVENT ;

: MOTION_DETECTION
    BEGIN 
        PIR DUP MOTION_DETECTED IF
            CLEAR_EVENT ." Movimento rilevato" CR
            BEGIN PIR IS_HIGH WHILE 0.5SEC RED BLINK_BUZ REPEAT
        ELSE 
            RED LED OFF CLEAR_EVENT ." Nessun movimento" CR 1 SEC DELAY 
        THEN
    BREAK_BUTTON IS_CLICKED UNTIL BREAK_BUTTON CLEAR_EVENT ;

( sonar.f )
GPIO4 OUTPUT
GPIO17 INPUT
GPIO4 CONSTANT TRIGGER_PIN
GPIO17 CONSTANT ECHO_PIN
ECHO_PIN GPREN0 ENABLE
ECHO_PIN GPFEN0 ENABLE

: TIME_OUT 5 A * MSEC DELAY ;
: SEND_TIME A MSEC DELAY ;
: TRIGGER TRIGGER_PIN HIGH SEND_TIME TRIGGER_PIN LOW ;
: LEDS_OFF RED LED OFF YELLOW LED OFF GREEN LED OFF BUZZER LOW ;

: TRIGGER_ECHO_CHECK
    BEGIN
    DEPTH 2 < WHILE
        ECHO_PIN IS_HIGH IF TIME_OUT DELAY THEN TRIGGER
        BEGIN ECHO_PIN IS_HIGH 0 = WHILE ." ." REPEAT NOW
        BEGIN ECHO_PIN IS_HIGH WHILE ." -" REPEAT NOW
    REPEAT
    DEPTH 2 = IF SWAP - . CR
            ELSE STACK_CLEAR THEN ;

: DISTANCE_DETECTION
    BEGIN
    DEPTH 4 < WHILE
        ECHO_PIN IS_HIGH IF TIME_OUT DELAY THEN
        TRIGGER
        BEGIN ECHO_PIN IS_HIGH 0 = WHILE REPEAT
        NOW
        BEGIN ECHO_PIN IS_HIGH WHILE REPEAT
        NOW
    REPEAT
    DEPTH 4 = IF
        SWAP - 154 * 2 / 1 MSEC / -ROT
        SWAP - 154 * 2 / 1 MSEC /
        2DUP < IF DROP ELSE NIP THEN . CR
    ELSE STACK_CLEAR THEN
;
: SONAR_CHECK BEGIN 1 SEC DELAY TRIGGER_ECHO_CHECK BREAK_BUTTON IS_CLICKED UNTIL BREAK_BUTTON CLEAR_EVENT ;
: SONAR_DETECTION BEGIN 1 SEC DELAY DISTANCE_DETECTION BREAK_BUTTON IS_CLICKED UNTIL BREAK_BUTTON CLEAR_EVENT ;

( security system )

: ALERT BEGIN 100 MSEC RED BLINK_BUZ BREAK_BUTTON IS_CLICKED UNTIL BUZZER LOW RED LED OFF QUIT ;

: DISTANCE_LED_DETECTION
    1 SEC DELAY
    LEDS_OFF
    BEGIN
    DEPTH 4 < WHILE 
		ECHO_PIN IS_HIGH IF TIME_OUT DELAY THEN TRIGGER
        BEGIN ECHO_PIN IS_HIGH 0 = WHILE REPEAT NOW
        BEGIN ECHO_PIN IS_HIGH WHILE REPEAT NOW
    REPEAT
    DEPTH 4 = IF 
        SWAP - 154 * 2 / 1 MSEC / -ROT
        SWAP - 154 * 2 / 1 MSEC /
        2DUP < IF DROP ELSE NIP THEN 
            DUP 3E8 / 0 = IF
                DOWN CURSOR
                DUP 64 / N_PRINT
                DUP 64 MOD A / N_PRINT
                DUP A MOD N_PRINT 'm 'm
            THEN
            DUP . ." mm " CR
            DUP 5A < IF ALERT THEN 
            DUP 5A C8 WITHIN IF RED LED ON BUZZER HIGH THEN
            DUP C8 190 WITHIN IF YELLOW LED ON THEN
            DUP 190 > IF GREEN LED ON THEN
     ELSE STACK_CLEAR LEDS_OFF THEN ;

: SONAR_LED BEGIN 1 SEC DELAY DISTANCE_LED_DETECTION BREAK_BUTTON IS_CLICKED UNTIL BREAK_BUTTON CLEAR_EVENT ;

: MOVE_MSG LCD CLEAR 'M 'O 'V 'E 'SPACE 'D 'E 'T 'E 'C 'T 'E 'D ;
: SECURITY_SYSTEM
	BEGIN 
		PIR DUP MOTION_DETECTED IF CLEAR_EVENT ." Movimento rilevato" MOVE_MSG CR
			BEGIN PIR IS_HIGH WHILE DISTANCE_LED_DETECTION REPEAT
		ELSE LEDS_OFF CLEAR_EVENT ." Nessun movimento" CR 1 SEC DELAY THEN
	BREAK_BUTTON IS_CLICKED UNTIL BREAK_BUTTON CLEAR_EVENT ;

: ALARM_MSG 'A 'L 'A 'R 'M 'SPACE 'A 'C 'T 'I 'V 'A 'T 'E 'D ;
: ALARM_OFF 'A 'L 'A 'R 'M 'SPACE 'O 'F 'F ;

: MAIN
    BEGIN
        PIN_CHECK WHILE
            ALARM_MSG
            SECURITY_SYSTEM
    REPEAT
    ALARM_OFF
;